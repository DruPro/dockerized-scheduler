on:
  push:
    branches:
      - production

jobs:
  docker-start:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3  # This step is necessary to ensure the repo is checked out

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3.7.1

    - name: Checking For Containers
      run: | 
        docker ps
        
    - name: Creating API|WEBSERVER|DATABASE Containers
      run: | 
        docker build -t test_api:v1 ./API  # Correct path to the API directory
        docker build -t test_web:v1 ./Web  # Correct path to the Web directory
        docker build -t test_database:v1 ./Backend  # Correct path to the Database directory 
        
        docker run --name api_instance -d test_api:v1
        echo "API Instance Is Succesfull" 
        docker run --name web_instance -d test_web:v1
        echo "WEB Instance Is Succesfull" 
        docker run --name database_instance -d test_database:v1
        echo "Database Instance Is Succesfull" 
        docker ps

    - name: Closing API|WEBSERVER|DATABASE Containers
      run: |
        echo "Closing API Container"
        docker stop api_instance  # Corrected syntax for stopping the container
        echo "Closing Web Container"
        docker stop web_instance  # Corrected syntax for stopping the container
        echo "Closing Database Container"
        docker stop database_instance  # Corrected syntax for stopping the container

    - name: Create PEM Key
      run: |
        mkdir -p ~/.ssh
        echo $SSH_KEY > alan.pem
        chmod 400 "alan.pem"
        ssh-keyscan ec2-18-236-74-56.us-west-2.compute.amazonaws.com > ~/.ssh/known_hosts
      env:
        SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Connect to EC2 and execute commands
      run: |
        ssh -i "alan.pem" ec2-user@ec2-18-236-74-56.us-west-2.compute.amazonaws.com /bin/bash <<'EOF'
        echo "Successfully connected to EC2!"
        # GO TO DIRECTORY CONTAINING GIT REPOSITORY
        cd /home/ec2-user/tst_dir/dockerized-scheduler
        # SHUT DOWN CONTAINERS
        sudo docker-compose down
        # GET LATEST REPOSITORY
        git pull
        # BUILD NEW CONTAINERS
        sudo docker-compose up --build
        EOF
      env:
        SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
